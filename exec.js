#!/usr/bin/env node

import*as e from"colors";import{createRequire as o}from"module";import*as r from"@capacitor/core";var t={n:e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return t.d(o,{a:o}),o},d:(e,o)=>{for(var r in o)t.o(o,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o)};const n=(l={default:()=>e.default},i={},t.d(i,l),i),a=o(import.meta.url)("path"),s=o(import.meta.url)("url");var l,i;const d=(e=>{var o={};return t.d(o,e),o})({Capacitor:()=>r.Capacitor}),c=(0,s.fileURLToPath)("file:///Users/timmoritzkuehle/Library/CloudStorage/Dropbox/Dokumente/Coding/ionic-web-app-dev-proxy/Code/constants.js"),p=(a.dirname(c),"undefined"!=typeof process?null===process||void 0===process?void 0:process.env:void 0),u=(!d.Capacitor.isNativePlatform()&&(void 0===p.MODE||p.MODE),"undefined"!=typeof process&&process.argv.includes("--webpack-watch")),g="localhost",m=`http://${g}:8910`,v=[m],y=["serveWithProxy","startProxyServer"],f=e=>{switch(e){case 200:return"OK";case 400:return"Bad Request";case 401:return"Unauthorized";case 403:return"Forbidden";case 404:return"Not Found";case 413:return"Content Too Large";case 500:return"Internal Server Error";default:return"Unknown Error"}},h=(e,o)=>{e?console.log("Shutting down proxy server for web app development ... "+(o?n.default.red(`Error: ${null==o?void 0:o.message}`):n.default.green("Success"))+"\n"):console.log("Proxy server is not running\n")},w=n.default.grey((new Date).toLocaleTimeString(Intl.DateTimeFormat().resolvedOptions().locale))+n.default.cyan.bold(" [webAppDevProxy] "),$=(e,o,r)=>{console.log(w+(r?n.default.yellow("resolving preflight request ➜ "):n.default.green("resolving request ➜ "))+n.default.gray("Status: ")+(e>=200&&e<=299?n.default.green(`${e} - ${f(e)}`):n.default.red(`${e} - ${f(e)}`+(o?`: ${o}`:""))))},x=e=>{var o;console.log(n.default.red(((null===(o=e.stack)||void 0===o?void 0:o.split("\n")[0])||`Error: ${e.code}: `+e.message.replace(/ionic-web-app-dev-proxy|\[[^\]]+\]/g,(e=>n.default.yellow(e.replace(/[[\]]/g,"")))))+n.default.cyan("\n\nNote: Valid commands are "+y.reduce(((e,o,r)=>(0!==r?e+(r<y.length-1?", ":" and "):"")+n.default.yellow(o)),"")+"\n")))},b=o(import.meta.url)("http");var S=t.n(b);const E=(e,o=null)=>{e.setHeader("Access-Control-Allow-Origin",o||"*"),e.setHeader("Access-Control-Allow-Headers","Content-Type, Authorization")},I=(e,o,r)=>{const t=(null==r?void 0:r.contentType)||"application/json";$(o),r&&e.setHeader("Content-Type",t),e.writeHead(o),e.end(r?((e,o)=>"application/json"===o?JSON.stringify(e):e.toString())(r.data,t):null)},P=(e,o,r,t,n=null)=>{$(r,t),o.setHeader("Content-Type","application/json"),o.writeHead(r),o.end(JSON.stringify({error:{code:r,http_status:r,message:`${r}: ${f(r)}`,data:n?{debug:n}:{}}})),e.destroy()},T=(e,o)=>{o&&(e=>{var o;let r;r="EADDRINUSE"===e.code?`Error: listen EADDRINUSE: [${m}] is already in use.`:(null===(o=e.stack)||void 0===o?void 0:o.split("\n")[0])||`Error: ${e.code}: ${e.message}`,r=r.replace(/\[[^\]]+\]/g,(e=>n.default.yellow(e.replace(/[[\]]/g,"")))),console.log(n.default.red(`  ➜ ${r}\n`))})(o),e&&e.listening?e.close((e=>{h(!0,e)})):h(!1)};process.argv.length<=2&&(x({code:"EMISSARG",message:"Missing argument: ionic-web-app-dev-proxy needs to be provided with a command to execute"}),process.exit(1)),"startProxyServer"===process.argv[2]?(e=>{(()=>{if("undefined"==typeof process)throw new Error("Error: Incompatible environment: This script is supposed to run in a nodeJS environment")})(),console.log((u?"\n":"")+"Starting proxy server for web app development ...\n");let o=null;try{if(!/^(https?:\/\/(www\.)?([\w0-9-]+\.?)+([a-z]{2,63})?|([0-9]{1,3}\.){3}[0-9]{1,3}):[0-9]{1,5}$/.test(e))throw new Error(`Invalid Parameter: [${e}] is not a valid Ionic app development server address`);o=S().createServer(((o,r)=>{var t;const a=(null===(t=o.url)||void 0===t?void 0:t.replace(/^\//,""))||"/";((e,o)=>{const r="OPTIONS"===o;console.log(w+(r?n.default.yellow("incoming preflight request ➜ "):n.default.green("incoming request ➜ "))+n.default.grey(`URL: ${(r?n.default.yellow:n.default.green)(e)}`+(r?"":` Method: ${n.default.green(o||"UNKNOWN")}`)))})(a,o.method),"OPTIONS"!==o.method?(E(r,o.headers.origin),((e,o,r)=>!!/^https?:\/\/(www\.)?([\w0-9-]+\.)+[a-z]{2,63}(\/[\w0-9-]+)*(\.[\w0-9]+)*([?&][\w0-9-_]+=[\w0-9-_%]*)*$/.test(r)||(P(e,o,400,"Target URL is invalid"),!1))(o,r,a)&&((e,o,r)=>{const t=e.headers["content-type"]||"application/json";let n="",a=0;e.on("data",(r=>{if(a+=r.length,a>2097152){const r="Request body size exceeds proxy server maximum limit (2MB)";P(e,o,413,r,`HTTP Error: 413: ${r}`)}else n+=r})),e.on("end",(async()=>{try{const a=await fetch(r,{method:e.method,headers:{"Content-Type":t},body:n}),s=a.headers.get("content-type")||"application/json",l="application/json"===t?await a.json():a.text();I(o,a.status,{contentType:s,data:l})}catch(r){const{stack:t,code:n,message:a}=r,s=(null==t?void 0:t.split("\n")[0])||`Error: ${n}: ${a}`;P(e,o,500,s,t)}}))})(o,r,a)):((e,o,r)=>{const{origin:t}=e.headers;E(o);let n=null;t?[...v,r].includes(t)||(n={code:403,message:`Origin [${t}] is not allowed to access proxy server`}):n={code:400,message:"Proxy server is unable to determine request origin"},n?P(e,o,n.code,n.message):I(o,200)})(o,r,e)})).listen(120021,g,(()=>{console.log(`${n.default.green(`  ➜ ${m}`)}\n`)})).on("error",(e=>{(e=>{console.log(n.default.red("  ➜ Error: Unable to serve Ionic App")+n.default.cyan(`\n\nNote: The ${n.default.yellow("serveWithProxy")} script is supposed to run in an Ionic project directory.\nPlease make sure that the Ionic CLI is installed on your system and that \nthis script is executed in the root directory of your Ionic project.\nIf you intend to run the proxy server only, use the ${n.default.yellow("startProxyServer")} script.\nFor more information, read the original error message below.\n\n`)+n.default.red(e.message))})(e)})).on("close",(()=>{h()}))}catch(e){T(o,e)}})("http://localhost:8100"):(x({code:"EINVARG",message:`Invalid argument: [${process.argv[2]}] is not a valid command`}),process.exit(1));